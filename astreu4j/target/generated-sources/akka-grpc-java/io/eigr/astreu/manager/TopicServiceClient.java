
// Generated by Akka gRPC. DO NOT EDIT.
package io.eigr.astreu.manager;

import akka.actor.ClassicActorSystemProvider;
import akka.stream.Materializer;
import akka.stream.SystemMaterializer;

import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;

import io.grpc.MethodDescriptor;

import static io.eigr.astreu.manager.TopicService.Serializers.*;

import scala.concurrent.ExecutionContext;


import akka.grpc.javadsl.SingleResponseRequestBuilder;


public abstract class TopicServiceClient extends TopicServiceClientPowerApi implements TopicService, AkkaGrpcClient {
  public static final TopicServiceClient create(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
    return new DefaultTopicServiceClient(settings, sys);
  }

  protected final static class DefaultTopicServiceClient extends TopicServiceClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultTopicServiceClient(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
        this.settings = settings;
        this.mat = SystemMaterializer.get(sys).materializer();
        this.ec = sys.classicSystem().dispatcher();
        this.clientState = new ClientState(
          settings,
          akka.event.Logging$.MODULE$.apply(sys.classicSystem(), DefaultTopicServiceClient.class, akka.event.LogSource$.MODULE$.<DefaultTopicServiceClient>fromAnyClass()),
          sys);
        this.options = NettyClientUtils.callOptions(settings);

        sys.classicSystem().getWhenTerminated().whenComplete((v, e) -> close());
      }

  
    
      private final SingleResponseRequestBuilder<io.eigr.astreu.manager.Topic, io.eigr.astreu.manager.TopicInfo> infoRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(infoDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<io.eigr.astreu.manager.Topic, com.google.protobuf.Empty> dropRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(dropDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<io.eigr.astreu.manager.Topic, io.eigr.astreu.manager.TopicInfo> createRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(createDescriptor, channel, options, settings, ec);
      }
    
  

      

        /**
         * For access to method metadata use the parameterless version of info
         */
        public java.util.concurrent.CompletionStage<io.eigr.astreu.manager.TopicInfo> info(io.eigr.astreu.manager.Topic request) {
          return info().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer info(io.eigr.astreu.manager.Topic) if possible.
         */
        
          public SingleResponseRequestBuilder<io.eigr.astreu.manager.Topic, io.eigr.astreu.manager.TopicInfo> info()
        
        {
          return infoRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of drop
         */
        public java.util.concurrent.CompletionStage<com.google.protobuf.Empty> drop(io.eigr.astreu.manager.Topic request) {
          return drop().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer drop(io.eigr.astreu.manager.Topic) if possible.
         */
        
          public SingleResponseRequestBuilder<io.eigr.astreu.manager.Topic, com.google.protobuf.Empty> drop()
        
        {
          return dropRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of create
         */
        public java.util.concurrent.CompletionStage<io.eigr.astreu.manager.TopicInfo> create(io.eigr.astreu.manager.Topic request) {
          return create().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer create(io.eigr.astreu.manager.Topic) if possible.
         */
        
          public SingleResponseRequestBuilder<io.eigr.astreu.manager.Topic, io.eigr.astreu.manager.TopicInfo> create()
        
        {
          return createRequestBuilder(clientState.internalChannel());
        }
      

      
        private static MethodDescriptor<io.eigr.astreu.manager.Topic, io.eigr.astreu.manager.TopicInfo> infoDescriptor =
          MethodDescriptor.<io.eigr.astreu.manager.Topic, io.eigr.astreu.manager.TopicInfo>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("astreu.core.protocol.manager.TopicService", "Info"))
            .setRequestMarshaller(new ProtoMarshaller<io.eigr.astreu.manager.Topic>(TopicSerializer))
            .setResponseMarshaller(new ProtoMarshaller<io.eigr.astreu.manager.TopicInfo>(TopicInfoSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<io.eigr.astreu.manager.Topic, com.google.protobuf.Empty> dropDescriptor =
          MethodDescriptor.<io.eigr.astreu.manager.Topic, com.google.protobuf.Empty>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("astreu.core.protocol.manager.TopicService", "Drop"))
            .setRequestMarshaller(new ProtoMarshaller<io.eigr.astreu.manager.Topic>(TopicSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.protobuf.Empty>(EmptySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<io.eigr.astreu.manager.Topic, io.eigr.astreu.manager.TopicInfo> createDescriptor =
          MethodDescriptor.<io.eigr.astreu.manager.Topic, io.eigr.astreu.manager.TopicInfo>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("astreu.core.protocol.manager.TopicService", "Create"))
            .setRequestMarshaller(new ProtoMarshaller<io.eigr.astreu.manager.Topic>(TopicSerializer))
            .setResponseMarshaller(new ProtoMarshaller<io.eigr.astreu.manager.TopicInfo>(TopicInfoSerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



